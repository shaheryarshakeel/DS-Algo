Problem statement :

  Write a function that takes in a non-empty array of integers that are sorted
  in ascending order and returns a new array of the same length with the squares
  of the original integers also sorted in ascending order.



Solution 1 :

Complexity = O(nlogn) time, O(n) space

public int[] sortedSquaredArray(int[] array) {
    for (int i = 0; i < array.length; i++){
      array[i] = (int)Math.pow(array[i], 2.0);
    }
    Arrays.sort(array);
    return array;
  }

Solution 2 :

Complexity = O(n) time, O(n) space

public int[] sortedSquaredArray(int[] array) {
    int[] responseArray = new int[array.length];
    int smallerPointer = 0;
    int largerPointer = array.length - 1;

    for(int i = array.length - 1; i >=0 ; i--){
      int smallValue = array[smallerPointer];
      int largerValue = array[largerPointer];

      if(Math.abs(smallValue) > Math.abs(largerValue)){
        responseArray[i] = smallValue * smallValue;
        smallerPointer++;
      }else{
        responseArray[i] = largerValue * largerValue;
        largerPointer--;
      }
    }
    return responseArray;
  }
